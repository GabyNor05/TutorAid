import React, { useState, useEffect, useNavigate } from "react";
import jsPDF from "jspdf";
import "./lessonFeedback.css";

function FeedbackForm() {
    const [rating, setRating] = useState(3);
    const [subject, setSubject] = useState("");
    const [date, setDate] = useState("");
    const [punctual, setPunctual] = useState(false);
    const [setwork, setSetwork] = useState("");
    const [comments, setComments] = useState("");
    const [students, setStudents] = useState([]);
    const [selectedStudent, setSelectedStudent] = useState("");
    const [tutorName, setTutorName] = useState("");
    const tutorID = localStorage.getItem("userID");
    const navigate = useNavigate();

    useEffect(() => {
        async function fetchStudents() {
            try {
                const res = await fetch("http://localhost:5000/api/students");
                const data = await res.json();
                setStudents(data);
            } catch (err) {
                console.error("Error fetching students:", err);
            }
        }
        fetchStudents();
    }, []);

    useEffect(() => {
        async function fetchTutor() {
            if (!tutorID) return;
            try {
                const res = await fetch(`http://localhost:5000/api/users/${tutorID}`);
                const data = await res.json();
                setTutorName(data.name);
            } catch (err) {
                console.error("Error fetching tutor:", err);
            }
        }
        fetchTutor();
    }, [tutorID]);

    const handleSubmit = (e) => {
        e.preventDefault();

        navigate("/dashboard");

        // Create PDF
        const doc = new jsPDF();
        doc.setFontSize(14);
        doc.text("Lesson Feedback", 10, 10);
        doc.text(`Date of Lesson: ${date}`, 10, 20);
        doc.text(`Subject Taught: ${subject}`, 10, 30);
        doc.text(`Student On Time: ${punctual ? "Yes" : "No"}`, 10, 40);
        doc.text(`Setwork Covered: ${setwork}`, 10, 50);
        doc.text(`Participation Rating: ${rating}`, 10, 60);
        doc.text("Additional Comments:", 10, 70);
        doc.text(comments, 10, 80);
        doc.text(`Student Name: ${selectedStudent}`, 10, 15);
        doc.text(`Generated By: ${tutorName}`, 10, 25);

        doc.save(`lesson-feedback-${date}.pdf`);
    };

    const subjectOptions = [
    "Math", "Afrikaans", "Physics", "Biology", "English", "Zulu", "Sepedi",
    "Math Literacy", "AP Math", "AP English", "AP Biology", "IT", "CAT",
    "History", "Geography", "EMS", "Business Studies", "Accounting", "Homework"
    ];
    return (
        
        <div className=" bg-white rounded-xl shadow-lg p-10 max-w-2xl mx-auto">
            <form className="lesson-feedback-form flex flex-col  gap-5 text-gray-900 max-w-xl items-center" onSubmit={handleSubmit}>
                <div className="form-card flex flex-col gap-8 w-9/12">
                    <div className="lesson-feedback-particulars">
                    <div className="lesson-feedback-date w-2/5" style={{display: "flex", flexDirection: "column"}}>
                        <label className="feedback-label mb-2">Date of Lesson:</label>
                        <input type="date" className="feedback-input bg-transparent h-10 p-2 rounded-lg border-2 border-gray-300 shadow-inner w-full" value={date} onChange={e => setDate(e.target.value)} />
                    </div>
                    <div className="lesson-feedback-subject w-2/5" style={{display: "flex", flexDirection: "column"}}>
                        <label className="feedback-label mb-2">Subject Taught:</label>
                        <select
                            id="subject"
                            name="subject"
                            value={subject}
                            onChange={e => setSubject(e.target.value)}
                            required
                            className="feedback-input bg-transparent h-10 p-2 rounded-lg border-2 border-gray-300 shadow-inner w-full"
                        >
                            <option value="" className="">Select Subject</option>
                            {subjectOptions.map(subject => (
                                <option key={subject} value={subject.toLowerCase()}>{subject}</option>
                            ))}
                            
                        </select>
                    </div>
                </div>
                <div className="lesson-feedback-student" style={{display: "flex", flexDirection: "column"}}>
                    <label className="mb-2">Student Name:</label>
                    <input
                        type="text"
                        list="student-list"
                        value={selectedStudent}
                        onChange={e => setSelectedStudent(e.target.value)}
                        placeholder="Search for a student..."
                        required
                        className="feedback-input h-10 w-full p-2 rounded-lg border-2 border-gray-300 shadow-inner"
                    />
                    <datalist id="student-list">
                        {students.map(student => (
                            <option key={student.studentID} value={student.name} />
                        ))}
                    </datalist>
                </div>
                <div className="lesson-feedback-punctuality" style={{display: "flex", flexDirection: "column"}}>
                    <span className="mb-2">Was the student on time for their lesson?</span>
                    <label className="flex items-center cursor-pointer">
                    <input
                        type="checkbox"
                        checked={punctual}
                        onChange={e => setPunctual(e.target.checked)}
                        className="sr-only peer"
                    />
                    <span
                        className="w-6 h-6 rounded border-2 border-gray-300 flex items-center justify-center
                            peer-checked:bg-blue-500 peer-checked:border-blue-500 transition"
                    >
                        {punctual && (
                            <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" d="M5 13l4 4L19 7" />
                            </svg>
                        )}
                    </span>
                    
                </label>
                </div>
                <div className="lesson-feedback-setwork" style={{display: "flex", flexDirection: "column"}}>
                    <label className="feedback-label mb-2">What did you cover in the lesson?</label>
                    <input type="textarea" className="feedback-input h-10 w-150 p-2 rounded-lg border-2 border-gray-300 shadow-inner" placeholder="E.g., Algebra, Geometry, etc." value={setwork} onChange={e => setSetwork(e.target.value)} />
                </div>
                <div className="lesson-feedback-rating">
                    <label className="feedback-label mb-2">
                        Rate the student's participation during the lesson:
                    </label>
                    <div className="rating-bar">
                        <input
                            type="range"
                            min={1}
                            max={5}
                            value={rating}
                            onChange={e => setRating(Number(e.target.value))}
                            className="rating-slider"
                        />
                        <span className="rating-value">{rating}</span>
                    </div>
                </div>
                <div className="lesson-feedback-comments">
                    <label className="feedback-label mb-2">Additional comments about the lesson:</label>
                    <textarea className="feedback-textarea p-2 rounded-lg border-2 border-gray-300 shadow-inner" rows="4" placeholder="Enter your comments here..." value={comments} onChange={e => setComments(e.target.value)} />
                </div>
                <div className="report-link">
                        <p>Don't have an account?</p> 
                        <a href="/reportform">Report</a>
                    </div>
                </div>
                <button type="submit" className="submit-feedback-button">Create PDF</button>
            </form>
            
        </div>
    );
}

export default FeedbackForm;